{"version":3,"sources":["component/hero/hero.js","component/book/book.js","component/turn/turn.js","component/continue/continue.js","component/footer/footer.js","App.js","serviceWorker.js","index.js"],"names":["Hero","className","Book","title","Turn","author","books","style","backgroundColor","src","imageUrl","alt","map","key","Continue","Footer","id","href","App","turnData","Boolean","window","location","hostname","match","state","authors","allBooks","reduce","p","c","i","concat","fourRandomBooks","shuffle","slice","answer","sample","find","some","getTurnData","name","imageSource","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oQAaeA,MAXf,WACI,OACI,yBAAKC,UAAU,OACX,yBAAKA,UAAU,6BACX,2CACA,6ECGDC,MARf,YAAwB,IAATC,EAAQ,EAARA,MACX,OACI,yBAAKF,UAAU,UACX,4BAAKE,KCYFC,MAbf,YAAgC,IAAjBC,EAAgB,EAAhBA,OAAQC,EAAQ,EAARA,MACnB,OACI,yBAAKL,UAAU,WAAWM,MAAO,CAACC,gBAAiB,UAC/C,yBAAKP,UAAU,kBACX,yBAAKQ,IAAKJ,EAAOK,SAAUT,UAAU,cAAcU,IAAI,YAE3D,yBAAKV,UAAU,SACdK,EAAMM,KAAI,SAACT,GAAD,OAAW,kBAAC,EAAD,CAAMA,MAAOA,EAAOU,IAAKV,UCD5CW,MARf,WACI,OACI,+BCUOC,MAZf,WACI,OACI,yBAAKC,GAAG,SAASf,UAAU,OACvB,yBAAKA,UAAU,UACX,uBAAGA,UAAU,qBAAb,uBACwB,uBAAGgB,KAAK,gCAAR,yBCazBC,MAXf,YAA0B,IAAZC,EAAW,EAAXA,SACZ,OACE,yBAAKlB,UAAU,mBACb,kBAAC,EAAD,MACA,kBAAC,EAASkB,GACV,kBAAC,EAAD,MACA,kBAAC,EAAD,QCHcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WC+BN,IAAMC,EAAQ,CACZN,SAfF,SAAqBO,GACnB,IAAMC,EAAWD,EAAQE,QAAQ,SAAUC,EAAGC,EAAGC,GAC/C,OAAOF,EAAEG,OAAOF,EAAExB,SACjB,IACG2B,EAAkBC,YAAQP,GAAUQ,MAAM,EAAE,GAC5CC,EAASC,YAAOJ,GAEtB,MAAO,CACL3B,MAAO2B,EACP5B,OAAQqB,EAAQY,MAAK,SAACjC,GAAD,OACnBA,EAAOC,MAAMiC,MAAK,SAACpC,GAAD,OAAWA,IAAUiC,SAKjCI,CA3CI,CACd,CACEC,KAAM,aACN/B,SAAU,4HACVgC,YAAa,oBACbpC,MAAO,CAAC,qCACA,YACA,cAEV,CACEmC,KAAM,eACN/B,SAAU,0HACVgC,YAAa,oBACbpC,MAAO,CAAC,KACA,SACA,kBAEV,CACEmC,KAAM,gBACN/B,SAAU,0HACVgC,YAAa,oBACbpC,MAAO,CAAC,sBACA,aACA,oBAuBZqC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAQpB,IAEXqB,SAASC,eAAe,SD0EpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f50c0513.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Hero() {\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"jumbotron col-10 offset-1\">\r\n                <h1>Author Quiz</h1>\r\n                <p>Select the book written by the author shown</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Hero;","import React from 'react';\r\n\r\nfunction Book({title}) {\r\n    return (\r\n        <div className=\"answer\">\r\n            <h4>{title}</h4>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Book;","import React from 'react';\r\n\r\nimport Book from '../book/book';\r\n\r\nfunction Turn({author, books}) {\r\n    return (\r\n        <div className=\"row turn\" style={{backgroundColor: \"white\"}}>\r\n            <div className=\"col-4 offset-1\">\r\n                <img src={author.imageUrl} className=\"authorImage\" alt=\"Author\"></img>\r\n            </div>\r\n            <div className=\"col-6\">\r\n            {books.map((title) => <Book title={title} key={title}></Book> )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Turn;","import React from 'react';\r\n\r\nfunction Continue() {\r\n    return (\r\n        <div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Continue;","import React from 'react';\r\n\r\nfunction Footer() {\r\n    return (\r\n        <div id=\"footer\" className=\"row\">\r\n            <div className=\"col-12\">\r\n                <p className=\"text-muted credit\">\r\n                    All images are from <a href=\"http://commons.wikipedia.org\">Wikipedia Commons</a>\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\nimport './bootstrap.min.css';\n\nimport './App.css';\nimport Hero from './component/hero/hero';\nimport Turn from './component/turn/turn';\nimport Continue from './component/continue/continue';\nimport Footer from './component/footer/footer';\n\nfunction App({turnData}) {\n  return (\n    <div className=\"container-fluid\">\n      <Hero></Hero>\n      <Turn {...turnData}></Turn>\n      <Continue></Continue>\n      <Footer></Footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {shuffle, sample} from 'underscore';\n\nconst authors = [\n  {\n    name: 'Mark Twain',\n    imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/thumb/0/0c/Mark_Twain_by_AF_Bradley.jpg/375px-Mark_Twain_by_AF_Bradley.jpg',\n    imageSource: 'Wikipedia Commons',\n    books: ['The Adventures of Huckleberry Finn',\n            'Sandstorm',\n            'Riverdale']\n  },\n  {\n    name: 'Stephen King',\n    imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/thumb/e/e3/Stephen_King%2C_Comicon.jpg/330px-Stephen_King%2C_Comicon.jpg',\n    imageSource: 'Wikipedia Commons',\n    books: ['It',\n            'Book 2',\n            'Lord of Rings']\n  },\n  {\n    name: 'J. K. Rowling',\n    imageUrl: 'https://upload.wikimedia.org/wikipedia/commons/thumb/f/fb/%C3%8Domha_J.K._Rowling.jpg/300px-%C3%8Domha_J.K._Rowling.jpg',\n    imageSource: 'Wikipedia Commons',\n    books: ['Barak Obama history',\n            'Blackfield',\n            'Harry Potter']\n  }\n\n];\n\nfunction getTurnData(authors) {\n  const allBooks = authors.reduce( function (p, c, i) {\n    return p.concat(c.books);\n  }, []);\n  const fourRandomBooks = shuffle(allBooks).slice(0,3);\n  const answer = sample(fourRandomBooks);\n\n  return {\n    books: fourRandomBooks,\n    author: authors.find((author) =>\n      author.books.some((title) => title === answer))\n  }\n}\n\nconst state = {\n  turnData: getTurnData(authors)\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <App {...state}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}